/**
 * @fileoverview Firestore Security Rules for the Aexy English learning app.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model,
 * ensuring that users can only access data associated with their own accounts.
 *
 * Data Structure: All user-specific data (daily usage, subscriptions,
 * conversations, and messages) is nested under the /users/{userId} path.
 * The /scenarios/{scenarioId} collection is publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing all users is disallowed for privacy.
 * - The scenarios collection is publicly readable to allow access to all scenarios.
 *
 * Denormalization for Authorization:
 *  - The userId is embedded in the path for all user-owned data to avoid
 *    the need for `get()` calls to verify ownership.
 * Structural Segregation:
 * - Private user data is stored under the /users/{userId} collection, while
 *   publicly readable scenario data is stored in the top-level /scenarios
 *   collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     *              Combines the ownership check with a document existence check.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can create their own profile.
     * @allow (get) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can get their own profile.
     * @allow (update) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can update their own profile.
     * @allow (delete) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can delete their own profile.
     * @deny (create) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to create profile for another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (get) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to get profile of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (update) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to update profile of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (delete) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to delete profile of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/daily_usage/{dailyUsageId} collection.
     * @path /users/{userId}/daily_usage/{dailyUsageId}
     * @allow (create) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can create daily usage for themselves.
     * @allow (get) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can get their own daily usage.
     * @allow (update) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can update their own daily usage.
     * @allow (delete) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can delete their own daily usage.
     * @deny (create) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to create daily usage for another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (get) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to get daily usage of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (update) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to update daily usage of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (delete) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to delete daily usage of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/daily_usage/{dailyUsageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/subscriptions/{subscriptionId} collection.
     * @path /users/{userId}/subscriptions/{subscriptionId}
     * @allow (create) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can create subscription for themselves.
     * @allow (get) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can get their own subscription.
     * @allow (update) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can update their own subscription.
     * @allow (delete) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can delete their own subscription.
     * @deny (create) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to create subscription for another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (get) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to get subscription of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (update) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to update subscription of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (delete) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to delete subscription of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/subscriptions/{subscriptionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/conversations/{conversationId} collection.
     * @path /users/{userId}/conversations/{conversationId}
     * @allow (create) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can create conversation for themselves.
     * @allow (get) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can get their own conversation.
     * @allow (update) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can update their own conversation.
     * @allow (delete) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can delete their own conversation.
     * @deny (create) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to create conversation for another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (get) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to get conversation of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (update) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to update conversation of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (delete) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to delete conversation of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/conversations/{conversationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/conversations/{conversationId}/messages/{messageId} collection.
     * @path /users/{userId}/conversations/{conversationId}/messages/{messageId}
     * @allow (create) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can create message for themselves.
     * @allow (get) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can get their own message.
     * @allow (update) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can update their own message.
     * @allow (delete) User LTu4e5YrC8NS0nBGZigGxiDhYa73 can delete their own message.
     * @deny (create) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to create message for another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (get) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to get message of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (update) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to update message of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @deny (delete) User mQ510ZLduYhB5YdZ8RMNxW74m6T2 tries to delete message of another user LTu4e5YrC8NS0nBGZigGxiDhYa73.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/conversations/{conversationId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /scenarios/{scenarioId} collection.
     * @path /scenarios/{scenarioId}
     * @allow (get) Any user can get a scenario.
     * @allow (list) Any user can list scenarios.
     * @deny (create) No user can create a scenario without specific authorization. // TODO: Add admin role for scenario creation if needed.
     * @deny (update) No user can update a scenario without specific authorization. // TODO: Add admin role for scenario updates if needed.
     * @deny (delete) No user can delete a scenario without specific authorization. // TODO: Add admin role for scenario deletion if needed.
     * @principle Public read access with restricted writes.
     */
    match /scenarios/{scenarioId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}