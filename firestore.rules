/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for data privacy and security.
 * All data is nested under /users/{userId}, ensuring that users can only access their own data.
 * The /scenarios collection is publicly readable.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed as there are no rules for listing the /users collection itself.
 * - The /scenarios collection is publicly readable but writes are denied (admin-only writes are not yet implemented, but the structure supports this).
 * - All user-owned data is secured by path-based ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for the /users collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create profile for 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (get, update, delete) User with ID 'user123' tries to read/update/delete profile for 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for the /daily_usage subcollection.
     * @path /users/{userId}/daily_usage/{dailyUsageId}
     * @allow (create) User with ID 'user123' creates a daily usage record.
     *   - request.auth.uid: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their daily usage record.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create a daily usage record for 'user456'.
     *   - request.auth.uid: 'user123'
     * @deny (get, update, delete) User with ID 'user123' tries to read/update/delete daily usage record for 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/daily_usage/{dailyUsageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for the /subscriptions subcollection.
     * @path /users/{userId}/subscriptions/{subscriptionId}
     * @allow (create) User with ID 'user123' creates a subscription record.
     *   - request.auth.uid: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their subscription record.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create a subscription record for 'user456'.
     *   - request.auth.uid: 'user123'
     * @deny (get, update, delete) User with ID 'user123' tries to read/update/delete subscription record for 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/subscriptions/{subscriptionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for the /conversations subcollection.
     * @path /users/{userId}/conversations/{conversationId}
     * @allow (create) User with ID 'user123' creates a conversation record.
     *   - request.auth.uid: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their conversation record.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create a conversation record for 'user456'.
     *   - request.auth.uid: 'user123'
     * @deny (get, update, delete) User with ID 'user123' tries to read/update/delete conversation record for 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/conversations/{conversationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for the /messages subcollection.
     * @path /users/{userId}/conversations/{conversationId}/messages/{messageId}
     * @allow (create) User with ID 'user123' creates a message record.
     *   - request.auth.uid: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their message record.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create a message record for 'user456'.
     *   - request.auth.uid: 'user123'
     * @deny (get, update, delete) User with ID 'user123' tries to read/update/delete message record for 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/conversations/{conversationId}/messages/{messageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to the /scenarios collection.
     * @path /scenarios/{scenarioId}
     * @allow (get, list) Any user can read scenario data.
     *   - request.auth.uid: null (or any value)
     * @deny (create, update, delete) No user can create, update, or delete scenario data.
     *   - request.auth.uid: any value
     * @principle Allows public read access and restricts write access.
     */
    match /scenarios/{scenarioId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}