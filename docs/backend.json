{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the Aexy English learning app.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "tier": {
          "type": "string",
          "description": "Subscription tier of the user (FREE, STANDARD, PREMIUM)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "DailyUsage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DailyUsage",
      "type": "object",
      "description": "Tracks daily conversation usage for a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the daily usage record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User. (Relationship: User 1:N DailyUsage)"
        },
        "date": {
          "type": "string",
          "description": "Date for which the usage is recorded.",
          "format": "date"
        },
        "conversationsCount": {
          "type": "number",
          "description": "Number of conversations started by the user on this date."
        }
      },
      "required": [
        "id",
        "userId",
        "date"
      ]
    },
    "Subscription": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Subscription",
      "type": "object",
      "description": "Represents a user's subscription information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the subscription."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User. (Relationship: User 1:N Subscription)"
        },
        "tier": {
          "type": "string",
          "description": "Subscription tier (FREE, STANDARD, PREMIUM)."
        },
        "status": {
          "type": "string",
          "description": "Status of the subscription (active, inactive, etc.)."
        },
        "startDate": {
          "type": "string",
          "description": "Timestamp indicating when the subscription started.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "Timestamp indicating when the subscription ends (if applicable).",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "tier"
      ]
    },
    "Conversation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Conversation",
      "type": "object",
      "description": "Represents a conversation between a user and the AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the conversation."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User. (Relationship: User 1:N Conversation)"
        },
        "scenarioId": {
          "type": "number",
          "description": "ID of the scenario used for the conversation."
        },
        "status": {
          "type": "string",
          "description": "Status of the conversation (active, ended)."
        },
        "startedAt": {
          "type": "string",
          "description": "Timestamp indicating when the conversation started.",
          "format": "date-time"
        },
        "endedAt": {
          "type": "string",
          "description": "Timestamp indicating when the conversation ended.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "scenarioId"
      ]
    },
    "Message": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Message",
      "type": "object",
      "description": "Represents a message within a conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the message."
        },
        "conversationId": {
          "type": "string",
          "description": "Reference to the Conversation. (Relationship: Conversation 1:N Message)"
        },
        "role": {
          "type": "string",
          "description": "Role of the message sender (user or ai)."
        },
        "content": {
          "type": "string",
          "description": "Content of the message."
        },
        "feedback": {
          "type": "string",
          "description": "Feedback on the message (grammar, pronunciation).",
          "format": "json"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the message was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "conversationId",
        "role",
        "content"
      ]
    },
    "Scenario": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Scenario",
      "type": "object",
      "description": "Represents a conversation scenario.",
      "properties": {
        "id": {
          "type": "number",
          "description": "Unique identifier for the scenario."
        },
        "title": {
          "type": "string",
          "description": "Title of the scenario."
        },
        "difficulty": {
          "type": "string",
          "description": "Difficulty level of the scenario."
        },
        "duration": {
          "type": "string",
          "description": "Estimated duration of the scenario."
        },
        "isPremium": {
          "type": "boolean",
          "description": "Indicates if the scenario is only available for premium users."
        },
        "initialPrompt": {
          "type": "string",
          "description": "Initial prompt for the AI in this scenario."
        }
      },
      "required": [
        "id",
        "title",
        "difficulty"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile data. Secured by path-based ownership; only the authenticated user can access their own profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/daily_usage/{dailyUsageId}",
        "definition": {
          "entityName": "DailyUsage",
          "schema": {
            "$ref": "#/backend/entities/DailyUsage"
          },
          "description": "Stores daily usage data for a specific user. Secured by path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "dailyUsageId",
              "description": "The unique identifier for the daily usage record."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/subscriptions/{subscriptionId}",
        "definition": {
          "entityName": "Subscription",
          "schema": {
            "$ref": "#/backend/entities/Subscription"
          },
          "description": "Stores subscription information for a specific user. Secured by path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "subscriptionId",
              "description": "The unique identifier for the subscription."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/conversations/{conversationId}",
        "definition": {
          "entityName": "Conversation",
          "schema": {
            "$ref": "#/backend/entities/Conversation"
          },
          "description": "Stores conversation data for a specific user. Secured by path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "conversationId",
              "description": "The unique identifier for the conversation."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/conversations/{conversationId}/messages/{messageId}",
        "definition": {
          "entityName": "Message",
          "schema": {
            "$ref": "#/backend/entities/Message"
          },
          "description": "Stores messages within a specific conversation for a specific user. Secured by path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "conversationId",
              "description": "The unique identifier for the conversation."
            },
            {
              "name": "messageId",
              "description": "The unique identifier for the message."
            }
          ]
        }
      },
      {
        "path": "/scenarios/{scenarioId}",
        "definition": {
          "entityName": "Scenario",
          "schema": {
            "$ref": "#/backend/entities/Scenario"
          },
          "description": "Stores information about conversation scenarios. Publicly readable.",
          "params": [
            {
              "name": "scenarioId",
              "description": "The unique identifier for the scenario."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to ensure security, scalability, and ease of debugging, while adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). Authorization Independence is achieved by avoiding `get()` calls in security rules. This is primarily accomplished through structural segregation (homogeneous security posture), and where required, denormalization.\n\nSpecifically:\n\n*   **Users Collection:** The `/users/{userId}` collection stores user profiles. This collection is secured using path-based rules, ensuring only the authenticated user (`request.auth.uid`) can read/write their own document. The `userId` parameter ensures that users can only access their own data.\n*   **Daily Usage Collection:** The `/users/{userId}/daily_usage/{dailyUsageId}` subcollection tracks daily conversation usage for each user. It leverages path-based rules to ensure that only the authenticated user can read/write their own usage data. This continues the hierarchical path structure for user-owned data.\n*   **Subscriptions Collection:** The `/users/{userId}/subscriptions/{subscriptionId}` subcollection stores subscription information for each user. Similar to the daily usage data, it relies on path-based ownership to ensure data privacy and security.\n*   **Conversations Collection:** The `/users/{userId}/conversations/{conversationId}` subcollection stores conversation data for each user. This enforces a clear ownership model. A user can only access conversations associated with their `userId`.\n*   **Messages Collection:** The `/users/{userId}/conversations/{conversationId}/messages/{messageId}` subcollection stores messages within each conversation. The path clearly represents the hierarchical relationship between users, conversations, and messages, making security rules straightforward.\n*   **Scenarios Collection:** The `/scenarios/{scenarioId}` collection stores information about the conversation scenarios. This collection is designed to be publicly readable, so no user-specific authorization is needed for reading scenario data. However, write access would be restricted to authorized admins (if such functionality is needed).\n\nThe structure avoids the need for complex `get()` calls in security rules by ensuring that all necessary authorization information is available within the document path itself or within the document data (if using membership maps, although this is not used in the current design since every document is owned by one user). This enhances security and makes the rules easier to understand and maintain.\n\nThe segregation of data into user-specific subcollections allows for simple and robust security rules based on `request.auth.uid`. This design supports the required QAPs by ensuring secure `list` operations within each user's data, as rules can be applied to entire collections or subcollections based on path-based ownership."
  }
}